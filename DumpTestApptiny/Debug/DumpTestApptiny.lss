
DumpTestApptiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a1  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000016f  00000000  00000000  000005cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c2  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000250  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000147  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	   PA2	 - 8
	   PA1	 - 9
	                                                                        */
	/************************************************************************/
	
	switch (pinNumber)
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	6f c0       	rjmp	.+222    	; 0xe4 <__vector_2>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
	{
		case 1:
			DDRB |= (1 << PB3);
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
		break;
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
		case 2:
			DDRB |= (1 << PB2);
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
		break;
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
		case 3:
			DDRA |= (1 << PA7);
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
		break;
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
		case 4:
			DDRA |= (1 << PA6);
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
		break;
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
		case 5:
			DDRA |= (1 << PA5);
  22:	11 24       	eor	r1, r1
		break;
  24:	1f be       	out	0x3f, r1	; 63
		case 6:
			DDRA |= (1 << PA4);
  26:	cf e5       	ldi	r28, 0x5F	; 95
		break;
  28:	d2 e0       	ldi	r29, 0x02	; 2
		case 7:
			DDRA |= (1 << PA3);
  2a:	de bf       	out	0x3e, r29	; 62
		break;
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
		case 8:
			DDRA |= (1 << PA2);
  2e:	10 e0       	ldi	r17, 0x00	; 0
		break;
  30:	a0 e6       	ldi	r26, 0x60	; 96
		case 9:
		DDRA |= (1 << PA1);
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e0       	ldi	r30, 0x00	; 0
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 36       	cpi	r26, 0x67	; 103
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	6a d0       	rcall	.+212    	; 0x12a <main>
  56:	d2 c0       	rjmp	.+420    	; 0x1fc <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z14serviceRoutinev>:
#endif

//////////////////////////////////////////////////////////////////////////
void serviceRoutine(){
	
	if ( (PINA&(1<<PINA3)) == (0x00) )
  5a:	cb 99       	sbic	0x19, 3	; 25
  5c:	03 c0       	rjmp	.+6      	; 0x64 <_Z14serviceRoutinev+0xa>
	{
		intentToOn = true;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	80 93 63 00 	sts	0x0063, r24
	}
	
	if (  (PINA&(1<<PINA3)) == (0x00) && intentToOn == true)
  64:	cb 99       	sbic	0x19, 3	; 25
  66:	2b c0       	rjmp	.+86     	; 0xbe <_Z14serviceRoutinev+0x64>
  68:	80 91 63 00 	lds	r24, 0x0063
  6c:	81 11       	cpse	r24, r1
  6e:	2a c0       	rjmp	.+84     	; 0xc4 <_Z14serviceRoutinev+0x6a>
  70:	26 c0       	rjmp	.+76     	; 0xbe <_Z14serviceRoutinev+0x64>
		{
			PORTA |= (LED0_ON);
			nTimeMillis = 0;
			while ( 1 )
			{
				nTimeMillis++;
  72:	01 96       	adiw	r24, 0x01	; 1
				if (nTimeMillis > PRESS_WAIT)
  74:	89 3c       	cpi	r24, 0xC9	; 201
  76:	2f ea       	ldi	r18, 0xAF	; 175
  78:	92 07       	cpc	r25, r18
  7a:	d8 f3       	brcs	.-10     	; 0x72 <_Z14serviceRoutinev+0x18>
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			nTimeMillis = 0;
			while ( 1 )
			{
				nTimeMillis++;
  80:	01 96       	adiw	r24, 0x01	; 1
				if (nTimeMillis > PRESS_WAIT)
  82:	89 3c       	cpi	r24, 0xC9	; 201
  84:	2f ea       	ldi	r18, 0xAF	; 175
  86:	92 07       	cpc	r25, r18
  88:	d8 f3       	brcs	.-10     	; 0x80 <_Z14serviceRoutinev+0x26>
  8a:	90 93 65 00 	sts	0x0065, r25
  8e:	80 93 64 00 	sts	0x0064, r24
				{
					break;
				}
			}
			interruptFired = false;
  92:	10 92 62 00 	sts	0x0062, r1
			//////////////////////////////////////////////////////////////////////////
			//  set up device
			DDRA |= ( LED0_ON | LED1_ON | AL_SHDN_HIGH);			// set data direction.
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	8a bb       	out	0x1a, r24	; 26
			DDRA |= (0<<PWR);										// set PWR button pin as input.
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8a bb       	out	0x1a, r24	; 26
			PORTA |= (LED0_ON | LED1_ON | AL_SHDN_HIGH);			// set HIGH.Set SHDN to HIGH (Active LOW)
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	87 60       	ori	r24, 0x07	; 7
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
			//////////////////////////////////////////////////////////////////////////
			nTimeMillis = 0;
			while ( 1 )
			{
				nTimeMillis++;
  aa:	01 96       	adiw	r24, 0x01	; 1
				if (nTimeMillis > PRESS_WAIT)
  ac:	89 3c       	cpi	r24, 0xC9	; 201
  ae:	2f ea       	ldi	r18, 0xAF	; 175
  b0:	92 07       	cpc	r25, r18
  b2:	d8 f3       	brcs	.-10     	; 0xaa <_Z14serviceRoutinev+0x50>
  b4:	90 93 65 00 	sts	0x0065, r25
  b8:	80 93 64 00 	sts	0x0064, r24
  bc:	08 95       	ret
			}
			
		}
	}
	else
	devState = false;// on sleep ram/ registers are unaltered.
  be:	10 92 66 00 	sts	0x0066, r1
  c2:	08 95       	ret
		// ----____----
		//     |  |
		//    action
		//////////////////////////////////////////////////////////////////////////
		//remove pin change interrupt for now, immediately.
		cli();//this will unset the I bit in SREG, disable any interrupts to occur/ take place.
  c4:	f8 94       	cli
		GIMSK |= ( 0 << PCIE0);	// disable interrupt pin change.from 0 - 7 pcints. where pcint3 is been configured.
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	8b bf       	out	0x3b, r24	; 59
		PCMSK0 |= ( 0 << PCINT3);	// unset bit PCINT3 as button is on this interrupt.
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	82 bb       	out	0x12, r24	; 18
		//////////////////////////////////////////////////////////////////////////
		// done removing PCINT
		//////////////////////////////////////////////////////////////////////////
		interruptFired = true;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 62 00 	sts	0x0062, r24
		intentToOff = false;
  d4:	10 92 60 00 	sts	0x0060, r1
		intentToOn = false;
  d8:	10 92 63 00 	sts	0x0063, r1
		
		if (interruptFired == true)
		{
			PORTA |= (LED0_ON);
  dc:	da 9a       	sbi	0x1b, 2	; 27
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	c7 cf       	rjmp	.-114    	; 0x72 <_Z14serviceRoutinev+0x18>

000000e4 <__vector_2>:
	else
	devState = false;// on sleep ram/ registers are unaltered.
}
//////////////////////////////////////////////////////////////////////////

ISR( PCINT0_vect ){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	
	serviceRoutine();
 106:	a9 df       	rcall	.-174    	; 0x5a <_Z14serviceRoutinev>
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:

int main(void)
{	
	//////////////////////////////////////////////////////////////////////////
	// start off with clearing all interrupts.		
	MCUCR = 0x00;
 12a:	15 be       	out	0x35, r1	; 53
	wdt_disable();
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	81 bd       	out	0x21, r24	; 33
 134:	11 bc       	out	0x21, r1	; 33
 136:	0f be       	out	0x3f, r0	; 63
	//////////////////////////////////////////////////////////////////////////
	
	
	//////////////////////////////////////////////////////////////////////////
	//  set up device
	DDRA |= ( LED0_ON | LED1_ON | AL_SHDN_HIGH);			// set data direction.
 138:	8a b3       	in	r24, 0x1a	; 26
 13a:	87 60       	ori	r24, 0x07	; 7
 13c:	8a bb       	out	0x1a, r24	; 26
	DDRA |= (0<<PWR);										// set PWR button pin as input.
 13e:	8a b3       	in	r24, 0x1a	; 26
 140:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (LED0_ON | LED1_ON | AL_SHDN_HIGH);			// set HIGH.Set SHDN to HIGH (Active LOW)
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	87 60       	ori	r24, 0x07	; 7
 146:	8b bb       	out	0x1b, r24	; 27
	 return result;
}


int main(void)
{	
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	36 2f       	mov	r19, r22
 14e:	25 2f       	mov	r18, r21
			 if (nTimeMillis > PRESS_WAIT)
			 {
				 break;
			 }
		 }
		 intentToOff = true;
 150:	41 e0       	ldi	r20, 0x01	; 1
				interruptFired = false;			
				//////////////////////////////////////////////////////////////////////////
				// sleep now
				//////////////////////////////////////////////////////////////////////////
				sbi(MCUCR,PUD);                                  //Disables All Internal Pullup Resistors
				ACSR = ( 1 << ACD );							// Turn off analog comparator.
 152:	e0 e8       	ldi	r30, 0x80	; 128
				cbi(ADCSRA,ADEN);                              //switch Analog to Digital Converter OFF
				PRR = 0x0F;						// reduce all power before sleep.
 154:	7f e0       	ldi	r23, 0x0F	; 15
	 return result;
}


int main(void)
{	
 156:	83 2f       	mov	r24, r19
 158:	92 2f       	mov	r25, r18
		 
		 
		 
		 nTimeMillis = 0;
		 while( 1 ){
			 nTimeMillis++;
 15a:	01 96       	adiw	r24, 0x01	; 1
			 if (nTimeMillis > PRESS_WAIT)
 15c:	89 3c       	cpi	r24, 0xC9	; 201
 15e:	ff ea       	ldi	r31, 0xAF	; 175
 160:	9f 07       	cpc	r25, r31
 162:	d8 f3       	brcs	.-10     	; 0x15a <main+0x30>
			 {
				 break;
			 }
		 }
		 intentToOff = true;
 164:	40 93 60 00 	sts	0x0060, r20
		 nTimeMillis = 0;
 168:	30 93 64 00 	sts	0x0064, r19
 16c:	20 93 65 00 	sts	0x0065, r18
		if( (PINA&(1<<PINA3)) == (0x00) && (intentToOff == true))
 170:	cb 99       	sbic	0x19, 3	; 25
 172:	f1 cf       	rjmp	.-30     	; 0x156 <main+0x2c>
		{
			
			interruptFired = false;
 174:	10 92 62 00 	sts	0x0062, r1
			PORTA &= ~(1<<LED1);
 178:	d9 98       	cbi	0x1b, 1	; 27
			//////////////////////////////////////////////////////////////////////////
			// wait and until some timeout occurs
			// at same time pool for pin state.
			//////////////////////////////////////////////////////////////////////////
			while ( (PINA&(1<<PINA3)) == (0x00) )			
 17a:	0c c0       	rjmp	.+24     	; 0x194 <main+0x6a>
			{				
				nTimeMillis++;								
 17c:	80 91 64 00 	lds	r24, 0x0064
 180:	90 91 65 00 	lds	r25, 0x0065
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	90 93 65 00 	sts	0x0065, r25
 18a:	80 93 64 00 	sts	0x0064, r24
				
				if( nTimeMillis < PRESS_WAIT ){
					//nothing to do.
				}
				else if (nTimeMillis > PRESS_WAIT)
 18e:	89 3c       	cpi	r24, 0xC9	; 201
 190:	9f 4a       	sbci	r25, 0xAF	; 175
 192:	30 f4       	brcc	.+12     	; 0x1a0 <main+0x76>
			PORTA &= ~(1<<LED1);
			//////////////////////////////////////////////////////////////////////////
			// wait and until some timeout occurs
			// at same time pool for pin state.
			//////////////////////////////////////////////////////////////////////////
			while ( (PINA&(1<<PINA3)) == (0x00) )			
 194:	cb 9b       	sbis	0x19, 3	; 25
 196:	f2 cf       	rjmp	.-28     	; 0x17c <main+0x52>
					devState = true;		//indicates timeout occurs.
					break;
				}
			}
			
			if (devState == true)
 198:	80 91 66 00 	lds	r24, 0x0066
 19c:	88 23       	and	r24, r24
 19e:	51 f1       	breq	.+84     	; 0x1f4 <main+0xca>
			{
				nTimeMillis = 0;			//reset values now;
 1a0:	60 93 64 00 	sts	0x0064, r22
 1a4:	50 93 65 00 	sts	0x0065, r21
				devState = false;
 1a8:	10 92 66 00 	sts	0x0066, r1
				//cbi( PORTA, LED1 );
				//cbi( PORTA, SHDWN );
				//////////////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////////////
				// set indication that key is pressed
				PORTA &= ( LED0_OFF | LED1_OFF| AL_SHDN_LOW );
 1ac:	8b b3       	in	r24, 0x1b	; 27
 1ae:	1b ba       	out	0x1b, r1	; 27
				//////////////////////////////////////////////////////////////////////////
				
				//now plant pin change interrupt.
				//////////////////////////////////////////////////////////////////////////
				cli();
 1b0:	f8 94       	cli
				PCMSK0 |= ( 1 << PCINT3);	// set bit PCINT3 as button is on this interrupt.			
 1b2:	93 9a       	sbi	0x12, 3	; 18
				GIMSK |= ( 1 << PCIE0);	// enable interrupt pin change.from 0 - 7 pcints. where pcint3 is been configured.
 1b4:	8b b7       	in	r24, 0x3b	; 59
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	8b bf       	out	0x3b, r24	; 59
				sei();		//enable global interrupt for changes to come into effect.
 1ba:	78 94       	sei
				//////////////////////////////////////////////////////////////////////////
				
				intentToOff = false;	
 1bc:	10 92 60 00 	sts	0x0060, r1
				interruptFired = false;			
 1c0:	10 92 62 00 	sts	0x0062, r1
				//////////////////////////////////////////////////////////////////////////
				// sleep now
				//////////////////////////////////////////////////////////////////////////
				sbi(MCUCR,PUD);                                  //Disables All Internal Pullup Resistors
 1c4:	85 b7       	in	r24, 0x35	; 53
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	85 bf       	out	0x35, r24	; 53
				ACSR = ( 1 << ACD );							// Turn off analog comparator.
 1ca:	e8 b9       	out	0x08, r30	; 8
				cbi(ADCSRA,ADEN);                              //switch Analog to Digital Converter OFF
 1cc:	86 b1       	in	r24, 0x06	; 6
 1ce:	80 78       	andi	r24, 0x80	; 128
 1d0:	86 b9       	out	0x06, r24	; 6
				PRR = 0x0F;						// reduce all power before sleep.
 1d2:	70 b9       	out	0x00, r23	; 0
				// power related steps performed now.
				set_sleep_mode( SLEEP_MODE_PWR_DOWN );
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	87 7e       	andi	r24, 0xE7	; 231
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	85 bf       	out	0x35, r24	; 53
				sleep_enable();
 1dc:	85 b7       	in	r24, 0x35	; 53
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	85 bf       	out	0x35, r24	; 53
				sleep_mode();
 1e2:	85 b7       	in	r24, 0x35	; 53
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	85 bf       	out	0x35, r24	; 53
 1e8:	88 95       	sleep
 1ea:	85 b7       	in	r24, 0x35	; 53
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	85 bf       	out	0x35, r24	; 53
				//////////////////////////////////////////////////////////////////////////
				
				//////////////////////////////////////////////////////////////////////////
				// and if pin goes high, then PCI will fire and wake up the mcu
				//////////////////////////////////////////////////////////////////////////
				if ( (PINA&(1<<PINA3)) == (0x04) && devState == false)
 1f0:	89 b3       	in	r24, 0x19	; 25
 1f2:	b1 cf       	rjmp	.-158    	; 0x156 <main+0x2c>
			}
			else{
				//////////////////////////////////////////////////////////////////////////
				// button is not pressed - in a valid way.
				//////////////////////////////////////////////////////////////////////////
				PORTA |= (LED0_ON | LED1_ON | AL_SHDN_HIGH);			// set HIGH.Set SHDN to HIGH (Active LOW)
 1f4:	8b b3       	in	r24, 0x1b	; 27
 1f6:	87 60       	ori	r24, 0x07	; 7
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	ad cf       	rjmp	.-166    	; 0x156 <main+0x2c>

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
